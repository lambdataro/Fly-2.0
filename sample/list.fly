!map = @ { !self = $$; !f = $$; !lis = $$;
  {CASE:
    { ![] = lis; $CASE: -> [] };
    { !x::xs = lis; f x :: self f xs }
  }
};

!append' = @ { !self = $$; !lis = $$;
  {CASE:
    { ![] = lis; $CASE: -> $P: k -> k };
    { !x::xs = lis; x :: self xs }
  }
};

!append = { !lis = $$; {P: append' lis } };

!run_list = { !f = $$; !a = $$;
  {P: {Q: f a }; {$$} } []
};

!each = { !lis = $$; $Q: k -> map k lis };

!yield = { !v = $$; 
  $P: k -> { !l = $$;
    {P: k [] } (append l [v])}
};

println (run_list { $$; 
  !x = each [1, 2, 3, 4, 5];
  !y = each [1, 2, 3, 4, 5];
  { ? x < y; yield [x, y] }
} []);

