(*----------------------------------------*
 * Cryptarithm: DOG + ANT = CAT
 *----------------------------------------*)

!map = @ { !self = $$; !f = $$; !lis = $$;
  {CASE:
    { ![] = lis; $CASE: -> [] };
    { !x::xs = lis; f x :: self f xs }
  }
};

!remove = @ { !self = $$; !x = $$; !lis = $$;
  {CASE:
    { ![] = lis; $CASE: -> [] };
    { !y::ys = lis; ?x=y; $CASE: -> self x ys };
    { !y::ys = lis; y :: self x ys }
  }
};

!run_state = { !v = $$; !f = $$; !a = $$;  
  {ST: !res = f a; $ST: -> {$$; res} } v
};

!get = {$$; $ST: k -> { !v = $$; k v v} };
!set = {!v = $$; $ST: k -> { $$; k v v} }; 


!each = { $$;
  !lis = get [];
  $P: k -> map { !x = $$; set (remove x lis); k x } lis
};

!main = { $$;
  ![x, y, z] = run_state
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    {BR: $$;
      {P:
        ! d = each [];
        ! o = each [];
        ! g = each [];
        ! x = d * 100 + o * 10 + g;
        ? x >= 100;
        ! a = each [];
        ! n = each [];
        ! t = each [];
        ! y = a * 100 + n * 10 + t;
        ? y >= 100;
        ! c = each [];
        ! z = c * 100 + a * 10 + t;
        ? z >= 100;
        ? x + y = z;
        $BR: -> [x, y, z]
      }
    } [];
  writeln "DOG + ANT = CAT";
  print x;
  write " + ";
  print y;
  write " = ";
  println z;
};

!_ = main [];

